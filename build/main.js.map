{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios from \"axios\";\nimport {SceneResponse} from \"./model/SceneResponse\";\n\nconst BASE_URL: string = \"https://connectoreu.shadeconnector.com:8443\";\n\nconst generateMsgId = (): string => new Date().toISOString().replace(/[^0-9]/g, \"\");\nlet accessToken: string;\n\nclass Knconnect extends utils.Adapter {\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"knconnect\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        const login = await axios.post(\n            `${BASE_URL}/userCenter/user/login`,\n            new URLSearchParams({\n                loginName: this.config.loginName,\n                password: this.config.password,\n                appCode: \"c62c8a8c-4b35-4783-9168-65b06a12a77d\",\n                msgId: generateMsgId()\n            })\n        )\n\n        accessToken = login.data.accessToken;\n\n        const scenes = await axios.post<SceneResponse>(\n            `${BASE_URL}/userCenter/sceneService/getScenes`,\n            new URLSearchParams({\n                accessToken: accessToken,\n                msgId: generateMsgId()\n            })\n        )\n\n        this.log.info(\"Scenes: \" + JSON.stringify(scenes.data));\n\n        this.setObjectNotExistsAsync(\"scenes\", {\n            type: \"channel\",\n            common: {\n                name: \"scenes\",\n            },\n            native: {},\n        });\n\n        this.setObjectNotExistsAsync(\"devices\", {\n            type: \"channel\",\n            common: {\n                name: \"devices\",\n            },\n            native: {},\n        });\n\n        this.setObjectNotExists(\"triggerScene\", {\n            type: \"state\",\n            common: {\n                name: \"triggerScene\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: true\n            },\n            native: {}\n        })\n\n        for (const scene of scenes.data.scenes) {\n            this.setObjectNotExists(`scenes.${scene.sceneCode}`, {\n                type: \"channel\",\n                common: {\n                    name: scene.sceneCode\n                },\n                native: {},\n            });\n\n            this.setObjectNotExists(`scenes.${scene.sceneCode}.name`, {\n                type: \"state\",\n                common: {\n                    name: \"name\",\n                    type: \"string\",\n                    role: \"text\",\n                    read: true,\n                    write: false\n                },\n                native: {}\n            })\n\n            this.setState(`scenes.${scene.sceneCode}.name`, scene.sceneName);\n        }\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        this.subscribeStates(\"triggerScene\");\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates(\"lights.*\");\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates(\"*\");\n\n\n        // examples for the checkPassword/checkGroup functions\n        let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n        this.log.info(\"check user admin pw iobroker: \" + result);\n\n        result = await this.checkGroupAsync(\"admin\", \"admin\");\n        this.log.info(\"check group user admin group admin: \" + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            // The state was changed\n            if (id.endsWith(\".triggerScene\") && state.val !== null) {\n                this.log.info(`trigger scene: ${state.val}`);\n                await axios.post(\n                    `${BASE_URL}/userCenter/sceneService/triggerScene`,\n                    new URLSearchParams({\n                        accessToken: accessToken,\n                        msgId: generateMsgId(),\n                        sceneCode: state.val as string\n                    })\n                )\n\n                this.setState(\"triggerScene\", null)\n            }\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Knconnect(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Knconnect())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
